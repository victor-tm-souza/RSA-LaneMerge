{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { Marker } from 'react-leaflet';\nimport L from 'leaflet';\nfunction iconCar1() {\n  return L.icon({\n    iconUrl: require('../img/car.png'),\n    iconSize: new L.Point(35, 35)\n  });\n}\nconst CoordinatesRefresh = () => {\n  _s();\n  //const [message, setMessage] = useState(\"\");\n  const [newCoordinates, setNewCoordinates] = useState([40.644327187923224, -8.657387495040895]);\n  useEffect(() => {\n    let socket = new WebSocket('ws://localhost:7555');\n    let message;\n    // WebSocket event: socket open\n    socket.onopen = () => {\n      console.log('WebSocket connection opened.');\n    };\n\n    // Function to handle incoming messages\n    const handleMessage = event => {\n      message = event.data;\n      console.log(message);\n      const lat = parseFloat(message.split(' ')[0]);\n      const lon = parseFloat(message.split(' ')[1]);\n      setNewCoordinates([lat, lon]);\n      console.log(newCoordinates);\n    };\n\n    // Start reading messages every 10 milliseconds\n    const interval = setInterval(() => {\n      if (socket.readyState === WebSocket.OPEN) {\n        socket.onmessage = handleMessage;\n      }\n    }, 10);\n\n    // WebSocket event: connection closed\n    socket.onclose = () => {\n      console.log('WebSocket connection closed.');\n    };\n    return () => {\n      clearInterval(interval);\n      socket.removeEventListener(\"message\", handleMessage);\n      socket.close();\n    };\n  }, [newCoordinates]);\n  return null;\n};\n_s(CoordinatesRefresh, \"zqTIThWl+GdmF1VoSAZ8ypZpOg0=\");\n_c = CoordinatesRefresh;\nexport default CoordinatesRefresh;\nvar _c;\n$RefreshReg$(_c, \"CoordinatesRefresh\");","map":{"version":3,"names":["useEffect","useState","Marker","L","iconCar1","icon","iconUrl","require","iconSize","Point","CoordinatesRefresh","_s","newCoordinates","setNewCoordinates","socket","WebSocket","message","onopen","console","log","handleMessage","event","data","lat","parseFloat","split","lon","interval","setInterval","readyState","OPEN","onmessage","onclose","clearInterval","removeEventListener","close","_c","$RefreshReg$"],"sources":["/home/victms/Desktop/uni/RSA/projeto/project-RSA/frontend/mapping/src/components/CoordinatesRefresh.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Marker } from 'react-leaflet'\nimport L from 'leaflet';\n\nfunction iconCar1() {\n    return L.icon({\n        iconUrl: require('../img/car.png'),\n        iconSize: new L.Point(35, 35),\n    })\n}\n\nconst CoordinatesRefresh = () => {\n    //const [message, setMessage] = useState(\"\");\n    const [newCoordinates, setNewCoordinates] = useState([40.644327187923224, -8.657387495040895]);\n\n\n    useEffect(() => {\n        let socket = new WebSocket('ws://localhost:7555');\n        let message;\n        // WebSocket event: socket open\n        socket.onopen = () => {\n            console.log('WebSocket connection opened.');\n        }\n\n        // Function to handle incoming messages\n        const handleMessage = (event) => {\n            message = event.data;\n            console.log(message);\n            const lat = parseFloat(message.split(' ')[0]);\n            const lon = parseFloat(message.split(' ')[1]);\n            setNewCoordinates([lat, lon]);\n            console.log(newCoordinates);\n        };\n\n        // Start reading messages every 10 milliseconds\n        const interval = setInterval(() => {\n            if (socket.readyState === WebSocket.OPEN) {\n                socket.onmessage = handleMessage;\n            }\n        }, 10);\n\n        // WebSocket event: connection closed\n        socket.onclose = () => {\n            console.log('WebSocket connection closed.');\n        };\n\n        return () => {\n            clearInterval(interval);\n            socket.removeEventListener(\"message\", handleMessage);\n            socket.close();\n        };\n    }, [newCoordinates]);\n\n    return null;\n\n};\n\nexport default CoordinatesRefresh;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,MAAM,QAAQ,eAAe;AACtC,OAAOC,CAAC,MAAM,SAAS;AAEvB,SAASC,QAAQA,CAAA,EAAG;EAChB,OAAOD,CAAC,CAACE,IAAI,CAAC;IACVC,OAAO,EAAEC,OAAO,CAAC,gBAAgB,CAAC;IAClCC,QAAQ,EAAE,IAAIL,CAAC,CAACM,KAAK,CAAC,EAAE,EAAE,EAAE;EAChC,CAAC,CAAC;AACN;AAEA,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B;EACA,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,kBAAkB,EAAE,CAAC,iBAAiB,CAAC,CAAC;EAG9FD,SAAS,CAAC,MAAM;IACZ,IAAIc,MAAM,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC;IACjD,IAAIC,OAAO;IACX;IACAF,MAAM,CAACG,MAAM,GAAG,MAAM;MAClBC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC/C,CAAC;;IAED;IACA,MAAMC,aAAa,GAAIC,KAAK,IAAK;MAC7BL,OAAO,GAAGK,KAAK,CAACC,IAAI;MACpBJ,OAAO,CAACC,GAAG,CAACH,OAAO,CAAC;MACpB,MAAMO,GAAG,GAAGC,UAAU,CAACR,OAAO,CAACS,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7C,MAAMC,GAAG,GAAGF,UAAU,CAACR,OAAO,CAACS,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7CZ,iBAAiB,CAAC,CAACU,GAAG,EAAEG,GAAG,CAAC,CAAC;MAC7BR,OAAO,CAACC,GAAG,CAACP,cAAc,CAAC;IAC/B,CAAC;;IAED;IACA,MAAMe,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/B,IAAId,MAAM,CAACe,UAAU,KAAKd,SAAS,CAACe,IAAI,EAAE;QACtChB,MAAM,CAACiB,SAAS,GAAGX,aAAa;MACpC;IACJ,CAAC,EAAE,EAAE,CAAC;;IAEN;IACAN,MAAM,CAACkB,OAAO,GAAG,MAAM;MACnBd,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC/C,CAAC;IAED,OAAO,MAAM;MACTc,aAAa,CAACN,QAAQ,CAAC;MACvBb,MAAM,CAACoB,mBAAmB,CAAC,SAAS,EAAEd,aAAa,CAAC;MACpDN,MAAM,CAACqB,KAAK,CAAC,CAAC;IAClB,CAAC;EACL,CAAC,EAAE,CAACvB,cAAc,CAAC,CAAC;EAEpB,OAAO,IAAI;AAEf,CAAC;AAACD,EAAA,CA5CID,kBAAkB;AAAA0B,EAAA,GAAlB1B,kBAAkB;AA8CxB,eAAeA,kBAAkB;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}